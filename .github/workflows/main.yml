# Pipeline to test new Pull Request

trigger:
  branches:
    exclude:
      - "*"

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    Python39:
      python.version: "3.9"

steps:
  - bash: |
      ## Set DBT_SCHEMA
      echo "##vso[task.setvariable variable=DBT_SCHEMA]dbt_ci_$(Build.SourceVersion)"
      ## Set DBT_SNAPSHOT_DATE
      dbt_snapshot_date=$(TZ='America/Sao_Paulo' date --date='yesterday' +'%Y-%m-%d')
      echo "##vso[task.setvariable variable=DBT_SNAPSHOT_DATE]$dbt_snapshot_date"
      ## Set DBT_PROFILES_DIR
      echo "##vso[task.setvariable variable=DBT_PROFILES_DIR]$(System.DefaultWorkingDirectory)"
      ## Set DBT_LOCATION
      echo "##vso[task.setvariable variable=DBT_LOCATION]/mnt/datalake/dbt_ci/$(Build.SourceVersion)"
    displayName: "Create some environment variables"
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python.version)"
    displayName: "Use Python $(python.version)"

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
    displayName: "Install dependencies"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: "bbbaba69-2a60-4be1-9a97-cfa0d58c3028"
      pipeline: 3
      runVersion: "latest"
      allowPartiallySucceededBuilds: true
      artifact: "dbt-prod-artifact"
      path: "$(Pipeline.Workspace)"
    continueOnError: true
    displayName: "Download Artifact if exists"

  - bash: |
      if [ -f "$(Pipeline.Workspace)/manifest.json" ];
      then
        echo "##vso[task.setvariable variable=fileExist]true"
      else
        echo "##vso[task.setvariable variable=fileExist]false"
      fi
    displayName: "Check if file exists"
  - script: dbt deps --target ci
    displayName: "Install dbt dependencies"

  - script: "dbt run-operation create_current_env --args '{path: $(DBT_LOCATION)}' --target ci"
    env:
      DBT_TOKEN: $(DBT_TOKEN)
    displayName: "Create schema for CI environment"

  - script: diff-quality --violations sqlfluff
    env:
      DBT_TOKEN: $(DBT_TOKEN)
    displayName: "Lint SQL files with sqlfluff"

  - script: |
      dbt seed --select state:modified --full-refresh --target ci
      dbt run --select result:error+ result:fail+ state:modified+ --target ci
      dbt test --select result:error+ result:fail+ state:modified+ --target ci
    env:
      DBT_ARTIFACT_STATE_PATH: $(Pipeline.Workspace)
      DBT_DEFER_TO_STATE: true
      DBT_TOKEN: $(DBT_TOKEN)
    condition: and(succeeded(), eq(variables['fileExist'], 'true'))
    displayName: "dbt run w/ artifact"
  - script: |
      dbt seed --full-refresh --target ci
      dbt run --target ci
      dbt test --target ci
